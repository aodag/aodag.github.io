<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aodag6 on aodag6</title>
    <link>https://aodag.github.io/</link>
    <description>Recent content in aodag6 on aodag6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Dec 2018 00:00:00 +0900</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>作業中に聞く好きなギタリストのプレイリスト</title>
      <link>https://aodag.github.io/post/advent-2018/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0900</pubDate>
      
      <guid>https://aodag.github.io/post/advent-2018/</guid>
      <description>

&lt;h2 id=&#34;作業中に聞く音楽&#34;&gt;作業中に聞く音楽&lt;/h2&gt;

&lt;p&gt;みなさん作業中は音楽を聴くほうですか？
私は作業に集中したいときは音楽を聴くほうです。日本語歌詞入りだとさすがに意識がそちらに行ってしまうので、インストか洋楽中心ですが。&lt;/p&gt;

&lt;p&gt;というわけでさくっとプレイリスト&lt;/p&gt;

&lt;iframe src=&#34;https://open.spotify.com/embed/user/m2dv08p9oq5agx5pv4u64yiu9/playlist/5buOIv2nLhIZpefledIjTQ&#34; width=&#34;300&#34; height=&#34;380&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;なんとなく好きなギタリストで1曲ずつ選んでみたプレイリストです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Andy Timmons&lt;/li&gt;
&lt;li&gt;Mike Stern&lt;/li&gt;
&lt;li&gt;Steve Morse&lt;/li&gt;
&lt;li&gt;Eric Johnson&lt;/li&gt;
&lt;li&gt;Steve Vai&lt;/li&gt;
&lt;li&gt;Randy Rhodes&lt;/li&gt;
&lt;li&gt;Chris Impellitteri&lt;/li&gt;
&lt;li&gt;Nuno Bettencourt&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2018年&#34;&gt;2018年&lt;/h2&gt;

&lt;p&gt;そういえばこれは &lt;a href=&#34;https://adventar.org/calendars/3018&#34;&gt;pyspa Advent Calendar 2018&lt;/a&gt; の　8日目なのです。
今年のできごとをば。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今年はあまり変わったこともないな、引っ越しも転職もしてないし&lt;/li&gt;
&lt;li&gt;Plone Conferenceで英語ボロボロだったので、オンライン英会話を始めたところ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで2019年も、よろしくおねがいします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://adventar.org/calendars/3018#list-2018-12-09&#34;&gt;明日はikeの番&lt;/a&gt;です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xamarinを始めてみよう</title>
      <link>https://aodag.github.io/post/jxug-adent-2016/</link>
      <pubDate>Tue, 20 Dec 2016 18:51:09 +0900</pubDate>
      
      <guid>https://aodag.github.io/post/jxug-adent-2016/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2016/xamarin-welcome&#34;&gt;[初心者さん・学生さん大歓迎！] Xamarin その2 Advent Calendar 2016&lt;/a&gt; の20日目です。&lt;/p&gt;

&lt;p&gt;,(´_・ω・)_はい。始めてみることにしました。
初心者向けのアドベントカレンダーにエントリしてしまいましたが、そもそも僕自身初心者です。&lt;/p&gt;

&lt;h2 id=&#34;環境とか&#34;&gt;環境とか&lt;/h2&gt;

&lt;p&gt;なんとなくLinuxでやり始めて、xamarin-androidのビルドを試しましたが、PCLのなんかの参照がないとかで調査に時間かかりそうなので断念。
Macなんて持ってないのでWindowsでやってみます。&lt;/p&gt;

&lt;p&gt;Visual Studio 2015にXamarinプラットフォーム入れました。&lt;/p&gt;

&lt;h2 id=&#34;xamarin-への期待&#34;&gt;xamarin への期待&lt;/h2&gt;

&lt;p&gt;仕事でどうこうなどではないしMacもiOSもないので、やりたいことといったらAndroidアプリをC#で書けるということ。
あとIS12TとかMADSMAとかなぜか持ってるので、こいつらをなんかしら活用するためにwindows phoneとかuwpとかのアプリも作りたいなと。&lt;/p&gt;

&lt;h2 id=&#34;始める前に調べてみたもの&#34;&gt;始める前に調べてみたもの&lt;/h2&gt;

&lt;p&gt;WPFとかまあ多少いじったこともあるのでXAMLとかBindingあたりはまあいいかと思いつつ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アーキテクチャっぽいところはMVVMが鉄板のよう&lt;/li&gt;
&lt;li&gt;Prism とか Unity とか使うと楽できる&lt;/li&gt;
&lt;li&gt;behaviorも使えるらしいのでUIの制御はこちらでいろいろやればよさそう&lt;/li&gt;
&lt;li&gt;Azure Mobile Appsに接続するライブラリとか認証までできるらしいのでクラウドにつなぐときはそこらへん使えばいいはず&lt;/li&gt;
&lt;li&gt;Nunit-lightとかテストツールも問題なさそう&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;やってみた&#34;&gt;やってみた&lt;/h2&gt;

&lt;p&gt;とりあえずありがちなTodoリストアプリでもやってみよう。
Prismとか導入前にいったん手作業でMVVMを組んでみる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;System.ComponentModel.INotifyPropertyChanged&lt;/code&gt; を実装して、プロパティのsetterで &lt;code&gt;PropertyChanged&lt;/code&gt; イベントを発生させるとか、 &lt;code&gt;ObservableCollection&lt;/code&gt; を使うのはかわってない。
&lt;code&gt;ICommand&lt;/code&gt; の実装が &lt;code&gt;Xamarin.Forms&lt;/code&gt; に用意されてるのは便利。Prismにも用意されてるのかな。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Loaded&lt;/code&gt; イベントっぽいものが見つけられなかったので、 &lt;code&gt;DataContext&lt;/code&gt; にVM渡すタイミングがわからず。ひとまずXamlの中でリソースとして作成する方法にした。&lt;/p&gt;

&lt;p&gt;実際触り始めたのが今日(2016/12/20)なので、データベースやネットワークまでは手が届かず。(´・ω・｀)
時間をとってじっくり触ったのが半日だけ、UI以外のとこほとんどわからないままという状況に。&lt;/p&gt;

&lt;h2 id=&#34;とりあえずやってみた感触&#34;&gt;とりあえずやってみた感触&lt;/h2&gt;

&lt;p&gt;,(´&lt;em&gt;・ω・)&lt;/em&gt; WPF触ったとき、こんなんだったよなーという感じで書いてみて動いたので変わらず使えるMVVMアーキテクチャにはほっとします。
ただ、xamarin.formsと周辺ライブラリのバージョンコンフリクトにはまり、二回ほどプロジェクト作り直したので、そういう状況になってからのうまい復旧方法を知っておきたいと思いました。
（まあこの手の問題はどこでも同じだろうと思いますが）&lt;/p&gt;

&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;,(´_・ω・)_　UI以外触らないといけないですよね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ローカルデータベース使う&lt;/li&gt;
&lt;li&gt;とりあえず Azure Mobile App と接続する&lt;/li&gt;
&lt;li&gt;Android Wearから音声入力など試したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;明日 21日目は &lt;a href=&#34;http://qiita.com/nia_tn1012&#34;&gt;nia_tn1012&lt;/a&gt;さんです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>紅茶を飲もう</title>
      <link>https://aodag.github.io/post/advent-2016/</link>
      <pubDate>Fri, 09 Dec 2016 20:31:48 +0900</pubDate>
      
      <guid>https://aodag.github.io/post/advent-2016/</guid>
      <description>

&lt;h2 id=&#34;紅茶を飲もう&#34;&gt;紅茶を飲もう&lt;/h2&gt;

&lt;p&gt;今年は紅茶をまともに入れて飲むようになりました。
,(´_・ω・)_ということでミルクティーいれます！&lt;/p&gt;

&lt;h3 id=&#34;お道具&#34;&gt;お道具&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/001.JPG&#34; alt=&#34;&#34; /&gt;
紅茶セットである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/002.JPG&#34; alt=&#34;&#34; /&gt;
ルシピアで購入したティーポット。せっかくなのでボーンチャイナのもので。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/003.JPG&#34; alt=&#34;&#34; /&gt;
抽出用のポット。軟水は濃くなりがちということでこちらで抽出したら茶葉をとりのぞいてさっきの白いほうにうつす。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/004.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/005.JPG&#34; alt=&#34;&#34; /&gt;
ティーカップとスプーン。ティーカップはティーポットと一緒にルシピアで購入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/006.JPG&#34; alt=&#34;&#34; /&gt;
紅茶。家の近くのG-Crefで。アールグレイのFBOP。&lt;/p&gt;

&lt;h3 id=&#34;紅茶の等級&#34;&gt;紅茶の等級&lt;/h3&gt;

&lt;p&gt;,(´&lt;em&gt;・ω・)&lt;/em&gt; G-Crefは農場単位でパックしてたりするセレクトティーショップだそうな。
同じ種類の葉でも何種類もおいてあるので、等級だけは読めるようになりました。&lt;/p&gt;

&lt;p&gt;だいたい長くなると高い等級らしいです。
SFTGFOPだと、スーパーフィナーティッピーゴールデンフラワリーオレンジペコーだとか。&lt;/p&gt;

&lt;h3 id=&#34;紅茶いれます&#34;&gt;紅茶いれます&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/007.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/008.JPG&#34; alt=&#34;&#34; /&gt;
だいたい1回で２杯分くらいいれます。
キャディースプーンでちょい盛り2杯の葉っぱを300mlでいれてミルクティーにします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/009.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/010.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/011.JPG&#34; alt=&#34;&#34; /&gt;
お湯を注ぐ。勢い強めで。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/012.JPG&#34; alt=&#34;&#34; /&gt;
3～5分くらい抽出&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/013.JPG&#34; alt=&#34;&#34; /&gt;
その間に、お茶請けなど。MOONLIGHTはサクサクしてておいしいです。（あと名前がなんかかっこいい)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/014.JPG&#34; alt=&#34;&#34; /&gt;
そろそろミルクを用意。低脂肪などに逃げてはいけません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/015.JPG&#34; alt=&#34;&#34; /&gt;
なんとなく通っぽい感じでミルクインファースト(MIF)にします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/016.JPG&#34; alt=&#34;&#34; /&gt;
お茶できました。ベルガモットが香る。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/017.JPG&#34; alt=&#34;&#34; /&gt;
茶こしで葉っぱをぬいて、ティーポットに移し替えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/018.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/019.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/020.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/021.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/022.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/023.JPG&#34; alt=&#34;&#34; /&gt;
そして、注ぐ！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/024.JPG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://aodag.github.io/img/2016-12-09/300x300/025.JPG&#34; alt=&#34;&#34; /&gt;
MOONLIGHTと一緒にいただきます。&lt;/p&gt;

&lt;p&gt;,(´_・ω・)_あったまるわぁ～&lt;/p&gt;

&lt;h2 id=&#34;2016年&#34;&gt;2016年&lt;/h2&gt;

&lt;p&gt;そういえばこれは &lt;a href=&#34;http://www.adventar.org/calendars/1435&#34;&gt;pyspa Advent Calendar 2016&lt;/a&gt; の　9日目なのです。
今年のできごとをば。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引っ越しました&lt;/li&gt;
&lt;li&gt;転職しました&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで2017年も、よろしくおねがいします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/1435#list-2016-12-10&#34;&gt;明日はtsuyukiの親分&lt;/a&gt;です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASP.NET Core MVC を Linuxで使ってみよう</title>
      <link>https://aodag.github.io/post/aspnet-mvc-linux/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://aodag.github.io/post/aspnet-mvc-linux/</guid>
      <description>

&lt;h1 id=&#34;アドレス帳アプリケーションの作成&#34;&gt;アドレス帳アプリケーションの作成&lt;/h1&gt;

&lt;p&gt;前回、とりあえず ASP.NET Core を Linux上で動かせたので、 ASP.NET Core MVC と EntityFramework Core を使って簡単な Web+DBアプリケーションを作成してみます。
あまり Linux 固有の話はありません。&lt;/p&gt;

&lt;h2 id=&#34;アドレス帳プロジェクトを作る&#34;&gt;アドレス帳プロジェクトを作る&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;generator-aspnet&lt;/code&gt; には、 ASP.NET Core Mvc 設定済のプロジェクトを生成するジェネレータも用意されていますが、学習のため Empty Web Application から初めていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yo aspnet
? What type of application do you want to create? Empty Web Application
? What&#39;s the name of your ASP.NET application? Addressbook
$ cd Addressbook
$ dotnet restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトを生成したら、そのディレクトリに移動して &lt;code&gt;dotnet restore&lt;/code&gt; まで実行しておきます。&lt;/p&gt;

&lt;h2 id=&#34;mvcを使う準備&#34;&gt;MVCを使う準備&lt;/h2&gt;

&lt;p&gt;ASP.NET Core MVC を使うには、まず &lt;code&gt;project.json&lt;/code&gt; にライブラリを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies: {
    ...
    &amp;quot;Microsoft.AspNetCore.Mvc&amp;quot;: &amp;quot;1.0.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追加したら、 &lt;code&gt;dotnet restore&lt;/code&gt; でライブラリをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VS Code を利用している場合は、 &lt;code&gt;dotnet: Restore Packages&lt;/code&gt; を実行すればよいでしょう。&lt;/p&gt;

&lt;h2 id=&#34;webアプリケーションでmvcを有効にする&#34;&gt;WebアプリケーションでMVCを有効にする&lt;/h2&gt;

&lt;p&gt;ライブラリがインストールできたら、アプリケーションの &lt;code&gt;Startup&lt;/code&gt; クラス内で ASP.NET Core MVC を有効にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ConfigureServices&lt;/code&gt; メソッド内で、 &lt;code&gt;services&lt;/code&gt; の &lt;code&gt;AddMvc&lt;/code&gt; メソッドを実行します。
&lt;code&gt;AddMvc&lt;/code&gt; メソッドは &lt;code&gt;IserviceCollection&lt;/code&gt; への拡張メソッドで、 &lt;code&gt;Microsoft.AspNetCore.Mvc&lt;/code&gt; をインストールすると使えるようになります。&lt;/p&gt;

&lt;p&gt;さらにルーティングの設定も行います。
今回はとりあえずデフォルトのルーティングを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseMvcWithDefaultRoute();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Emptty Web Application&lt;/code&gt; では &lt;code&gt;Run&lt;/code&gt; メソッドになっていた部分を &lt;code&gt;UseMvcWithDefaultRoute&lt;/code&gt; の呼び出しに変更します。
これは &lt;code&gt;{controller}/{action}/{id?}&lt;/code&gt; というルーティングを設定するメソッドです。&lt;/p&gt;

&lt;h2 id=&#34;controllerを追加する&#34;&gt;Controllerを追加する&lt;/h2&gt;

&lt;p&gt;ルーティングができたのでその先で実際に処理を行うコントローラーを追加します。
コントローラークラスの追加も &lt;code&gt;generator-aspnet&lt;/code&gt; のサブジェネレータが用意されてるので、それを利用することにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir Controllers
$ mkdir Views
$ yo aspnet:MvcController HomeController
$ yo aspnet:MvcView Home/Index.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コントローラーを追加すると、空の &lt;code&gt;Index&lt;/code&gt; メソッドだけ用意されてるので、対応するビューのファイルも生成しています。
ビューの中身はなにもないので、単にエラーにならないだけの真っ白なページを表示できます。&lt;/p&gt;

&lt;h2 id=&#34;modelを定義する&#34;&gt;Modelを定義する&lt;/h2&gt;

&lt;p&gt;アドレス帳の中身を作成していきます。
アドレス帳にのせる人物を &lt;code&gt;Person&lt;/code&gt; クラスで実装しましょう。
&lt;code&gt;Models&lt;/code&gt; ディレクトリ以下に &lt;code&gt;aspnet:Class&lt;/code&gt; ジェネレータを使って単純なクラスを生成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir Models
$ cd Models
$ yo aspnet:Class Person
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Person&lt;/code&gt; クラスにいくつかのプロパティを実装します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Addressbook.Models
{
    public class Person
    {
        public int Id
        {
            get;
            set;
        }
        
        public string FirstName
        {
            get;
            set;
        }

        public string LastName
        {
            get;
            set;
        }

        public string FullName
        {
            get {return FirstName + &amp;quot; &amp;quot; + LastName;}
        }

        public string Email
        {
            get;
            set;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FullName&lt;/code&gt; プロパティは &lt;code&gt;FirstName&lt;/code&gt;, &lt;code&gt;LastName&lt;/code&gt; から算出するプロパティです。
またこのあとデータベースに保存するので、 &lt;code&gt;Id&lt;/code&gt; プロパティも実装しておきます。&lt;/p&gt;

&lt;h2 id=&#34;modelにアトリビュートをつける&#34;&gt;Modelにアトリビュートをつける&lt;/h2&gt;

&lt;p&gt;モデルクラスにアトリビュートをつけてプロパティの扱いを指定します。
&lt;code&gt;FullName&lt;/code&gt; プロパティは算出されるものなので、データベースに保存しないように &lt;code&gt;NotMappedAttribute&lt;/code&gt; を指定します。
&lt;code&gt;Email&lt;/code&gt; プロパティは &lt;code&gt;EmailAddressAttribute&lt;/code&gt; をつけて単なる文字列ではなくメールアドレスを持つプロパティであることを明示しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

...
        [Required]
        public string FirstName
        {
            get;
            set;
        }

        [Required]
        public string LastName
        {
            get;
            set;
        }

        [NotMapped]
        public string FullName
        {
            get {return FirstName + &amp;quot; &amp;quot; + LastName;}
        }

        [Required,EmailAddress]
        public string Email
        {
            get;
            set;
        }

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらのアトリビュートは、　&lt;code&gt;System.ComponentModel.Annotations&lt;/code&gt; ライブラリの &lt;code&gt;System.ComponentModel.DataAnnotations&lt;/code&gt; 名前空間や &lt;code&gt;System.ComponentModel.DataAnnotations.Schema&lt;/code&gt; 名前空間に含まれています。&lt;/p&gt;

&lt;h2 id=&#34;view&#34;&gt;View&lt;/h2&gt;

&lt;p&gt;モデルオブジェクトを作成してビューに表示してみます。
とりあえずデータベースのことは忘れて、アクションメソッドの中でインスタンスを生成してビューに渡すようにします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HomeController&lt;/code&gt; の &lt;code&gt;Index&lt;/code&gt; メソッドの中で &lt;code&gt;Person&lt;/code&gt; の配列を作成してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         public IActionResult Index()
         {
            var people = Enumerable.Range(0, 10)
                .Select(i =&amp;gt; new Models.Person() {
                    FirstName = string.Format(&amp;quot;Person{0}&amp;quot;, i),
                    LastName = &amp;quot;Last&amp;quot;,
                    Email = string.Format(&amp;quot;person{0}@example.com&amp;quot;, i)
                })
                .ToArray();
            return View(people);
         }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Linq を使って10個の &lt;code&gt;Person&lt;/code&gt; 要素を持つ配列 &lt;code&gt;people&lt;/code&gt; を作成しています。
この &lt;code&gt;people&lt;/code&gt; をそのまま &lt;code&gt;View&lt;/code&gt; メソッドの引数に渡すと、ビューのテンプレート内で &lt;code&gt;Model&lt;/code&gt; として参照できます。&lt;/p&gt;

&lt;p&gt;配列を渡しているので &lt;code&gt;Home/Index.cshtml&lt;/code&gt; の中ではループして、それぞれの要素を表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;FullName&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Email&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
@foreach (var person in Model)
{
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;@person.FullName&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;@person.Email&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
}
+&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@foreach&lt;/code&gt; を使って配列をループ処理します。
また、変数の参照は &lt;code&gt;@&lt;/code&gt; の後に変数名を書くとその値を評価した結果が表示されます。&lt;/p&gt;

&lt;h2 id=&#34;モデルとフォーム&#34;&gt;モデルとフォーム&lt;/h2&gt;

&lt;p&gt;新規作成や編集フォームのビューも作ってみましょう。
それぞれ、 &lt;code&gt;New&lt;/code&gt;, &lt;code&gt;Edit&lt;/code&gt; アクションとして実装してみます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HomeController&lt;/code&gt; に &lt;code&gt;New&lt;/code&gt; メソッドを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        public IActionResult New()
        {
            return View();
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;対応するビューを &lt;code&gt;Home/New.cshtml&lt;/code&gt; に作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yo aspnet:MvcView Home/New.cshtml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;New.cshtml&lt;/code&gt; にフォームを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model Addressbook.Models.Person
@{
    // ViewBag.Title = &amp;quot;New Page&amp;quot;;
}
&amp;lt;form asp-action=&amp;quot;create&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;label asp-for=&amp;quot;FirstName&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;input asp-for=&amp;quot;FirstName&amp;quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;label asp-for=&amp;quot;LastName&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;input asp-for=&amp;quot;LastName&amp;quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;label asp-for=&amp;quot;Email&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;input asp-for=&amp;quot;Email&amp;quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フォームのフィールドで &lt;code&gt;asp-for&lt;/code&gt; という属性を指定しています。
これはタグヘルパーという機能です。
使いたいタグヘルパーを &lt;code&gt;@AddTagHelper&lt;/code&gt; で指定します。
また、モデルのクラスを &lt;code&gt;@model&lt;/code&gt; で指定します。&lt;/p&gt;

&lt;p&gt;フォームの中の &lt;code&gt;input&lt;/code&gt; や &lt;code&gt;label&lt;/code&gt; には &lt;code&gt;asp-for&lt;/code&gt; タグヘルパーでプロパティを指定します。&lt;/p&gt;

&lt;p&gt;同様に編集用のフォームを &lt;code&gt;Edit&lt;/code&gt; アクションに作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        public IActionResult Edit(int id)
        {
            var person = new Models.Person() {
                FirstName = &amp;quot;Edit First Name&amp;quot;,
                LastName = &amp;quot;Edit Last Name&amp;quot;,
                Id = id,
                Email = &amp;quot;edit@example.com&amp;quot;,
            };
            return View(person);
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Edit&lt;/code&gt; メソッドでは、編集対象のオブジェクトをビューにモデルとして渡すようにしています。
ここでは、仮の内容で &lt;code&gt;Person&lt;/code&gt; クラスのインスタンスを作成しています。&lt;/p&gt;

&lt;h2 id=&#34;taghelperを使ってリンクを作る&#34;&gt;TagHelperを使ってリンクを作る&lt;/h2&gt;

&lt;p&gt;それぞれのフォームへのリンクを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a asp-action=&amp;quot;new&amp;quot;&amp;gt;New&amp;lt;/a&amp;gt;
&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;FullName&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Email&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
@foreach (var person in Model)
{
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;
            &amp;lt;a asp-action=&amp;quot;edit&amp;quot; asp-route-id=&amp;quot;@person.Id&amp;quot;&amp;gt;@person.FullName&amp;lt;/a&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;@person.Email&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
}
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フォームへのリンクも &lt;code&gt;TagHelpers&lt;/code&gt; を利用します。
&lt;code&gt;asp-action&lt;/code&gt; でアクション名を指定し、 &lt;code&gt;asp-route-id&lt;/code&gt; でルートURL内の &lt;code&gt;id&lt;/code&gt; パラメータに値を渡します。
現在のコントローラーと別のコントローラーへのリンクを作成する場合は &lt;code&gt;asp-controller&lt;/code&gt; でコントローラー名を指定しますが、今回は同じ &lt;code&gt;HomeController&lt;/code&gt; のアクションを利用するため指定しません。&lt;/p&gt;

&lt;p&gt;デフォルトのルート設定は &lt;code&gt;{controller}/{action}/{id?}&lt;/code&gt; となっているため、 &lt;code&gt;id&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; の場合では &lt;code&gt;home/edit/1&lt;/code&gt; というURLへのリンクが生成されます。&lt;/p&gt;

&lt;h2 id=&#34;entityframework-core-とツールをインストールする&#34;&gt;EntityFramework Core とツールをインストールする&lt;/h2&gt;

&lt;p&gt;モデルを永続化するために &lt;code&gt;EntityFramework Core&lt;/code&gt; を利用します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EntityFramework Core&lt;/code&gt; を依存ライブラリに追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies: {
    ...
    &amp;quot;Microsoft.EntityFrameworkCore&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;Microsoft.EntityFrameworkCore.Sqlite&amp;quot;: &amp;quot;1.0.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はデータベースに &lt;a href=&#34;http://sqlite.org&#34;&gt;Sqlite&lt;/a&gt; を使うことにします。&lt;/p&gt;

&lt;p&gt;また、スキーママイグレーションをするために &lt;code&gt;EntityFramework Core Tools&lt;/code&gt; をインストールします。
&lt;code&gt;EntityFramework Core Tools&lt;/code&gt; は &lt;code&gt;project.json&lt;/code&gt; の &lt;code&gt;tools&lt;/code&gt; セクションに追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;tools&amp;quot;: {
    ...
    &amp;quot;Microsoft.EntityFrameworkCore.Tools&amp;quot;: &amp;quot;1.0.0-preview2-final&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;EntityFramework Core Tools&lt;/code&gt; に必要な &lt;code&gt;EntityFramework Core Design&lt;/code&gt; を依存ライブラリに追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies: {
    ...
    &amp;quot;Microsoft.EntityFrameworkCore.Design&amp;quot;: &amp;quot;1.0.0-preview2-final&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;project.json&lt;/code&gt; にライブラリを追加したら、 &lt;code&gt;dotnet restore&lt;/code&gt; でライブラリをインストールします。&lt;/p&gt;

&lt;h2 id=&#34;entityframework-core-でモデルを永続化する&#34;&gt;EntityFramework Core でモデルを永続化する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DbContext&lt;/code&gt; を継承して &lt;code&gt;ApplicationDbContext&lt;/code&gt; を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.EntityFrameworkCore;

namespace Addressbook.Data
{
    public class ApplicationDbContext: DbContext
    {
        public ApplicationDbContext(DbContextOptions&amp;lt;ApplicationDbContext&amp;gt; options)
            :base(options)
        {

        }

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ApplicationDbContext&lt;/code&gt; のコンストラクタは &lt;code&gt;DbContextOptions&lt;/code&gt; を受け取るようにします。
この値はスーパークラスの &lt;code&gt;DbContext&lt;/code&gt; のコンストラクタにそのまま渡すようにします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ApplicationDbContext&lt;/code&gt; クラスに、永続化したいクラスの &lt;code&gt;DbSet&lt;/code&gt; をプロパティで定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        public DbSet&amp;lt;Models.Person&amp;gt; People
        {
            get;
            set;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;データベース接続設定&#34;&gt;データベース接続設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;appsettings.json&lt;/code&gt; を作成して、データベース接続を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;ConnectionStrings&amp;quot;: {
        &amp;quot;DefaultConnection&amp;quot;: &amp;quot;DataSource = addressbook.sqlite&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Startup&lt;/code&gt; クラスのコンストラクタで、 &lt;code&gt;appsettings.json&lt;/code&gt; などから設定を読み込む処理を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.Extensions.Configuration;
using System.IO;

...

    public class Startup
    {
        IConfigurationRoot Configuration
        {
            get;
            set;
        }
        public Startup()
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile(&amp;quot;appsettings.json&amp;quot;)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ApplicationDbContext&lt;/code&gt; を &lt;code&gt;ConfigureServices&lt;/code&gt; 中で　&lt;code&gt;services&lt;/code&gt; に追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            services.AddDbContext&amp;lt;Data.ApplicationDbContext&amp;gt;(options =&amp;gt; {
                options.UseSqlite(Configuration.GetConnectionString(&amp;quot;DefaultConnection&amp;quot;));
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで設定した &lt;code&gt;options&lt;/code&gt; が &lt;code&gt;ApplicationDbContext&lt;/code&gt; クラスのコンストラクタに渡されます。&lt;/p&gt;

&lt;h2 id=&#34;migrationする&#34;&gt;Migrationする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ApplicationDbContext&lt;/code&gt; に &lt;code&gt;Person&lt;/code&gt; 用の &lt;code&gt;DbSet&lt;/code&gt; プロパティを追加したので、 &lt;code&gt;EntityFramework Core Tools&lt;/code&gt; を使ってテーブルを作成します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EntityFramework Core Tools&lt;/code&gt; の機能は &lt;code&gt;dotnet&lt;/code&gt; コマンドの &lt;code&gt;ef&lt;/code&gt; サブコマンドから利用できます。&lt;/p&gt;

&lt;p&gt;試しに、 &lt;code&gt;ApplicationDbContext&lt;/code&gt; がアプリケーション内のDbContextとして認識されているのか確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet ef dbcontext list
Project Addressbook (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.
Addressbook.Data.ApplicationDbContext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それではデータベースにスキーママイグレーションを実行してテーブルを作成してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet ef migrations add FirstModel
$ dotnet ef database update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると、 &lt;code&gt;bin/Debug/netcoreapp1.0&lt;/code&gt; に &lt;code&gt;addressbook.sqlite&lt;/code&gt; ファイルが作成されます。&lt;/p&gt;

&lt;p&gt;sqlite3コマンドでデータベースファイルの中身を確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlite3 bin/Debug/netcoreapp1.0/addressbook.sqlite 
sqlite&amp;gt; .schema
CREATE TABLE &amp;quot;__EFMigrationsHistory&amp;quot; (
    &amp;quot;MigrationId&amp;quot; TEXT NOT NULL CONSTRAINT &amp;quot;PK___EFMigrationsHistory&amp;quot; PRIMARY KEY,
    &amp;quot;ProductVersion&amp;quot; TEXT NOT NULL
);
CREATE TABLE &amp;quot;People&amp;quot; (
    &amp;quot;Id&amp;quot; INTEGER NOT NULL CONSTRAINT &amp;quot;PK_People&amp;quot; PRIMARY KEY AUTOINCREMENT,
    &amp;quot;Email&amp;quot; TEXT NOT NULL,
    &amp;quot;FirstName&amp;quot; TEXT NOT NULL,
    &amp;quot;LastName&amp;quot; TEXT NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Person&lt;/code&gt; クラスのテーブルとして &lt;code&gt;People&lt;/code&gt; テーブルが作成されています。
また、マイグレーションのバージョンを管理するためのテーブル &lt;code&gt;__EFMigrationsHistory&lt;/code&gt; テーブルも作成されます。&lt;/p&gt;

&lt;h2 id=&#34;controllerにdbcontextをインジェクションする&#34;&gt;ControllerにDbContextをインジェクションする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ApplicationDbContext&lt;/code&gt; をコントローラーから扱うには、DependencyInjectionに登録されたオブジェクトをコンストラクタで受け取るようにします。
単にコントローラークラスのメソッド内で &lt;code&gt;ApplicationDbContext&lt;/code&gt; クラスのインスタンスを作成してもデータベース接続が設定されていない状態のものになってしまいます。&lt;/p&gt;

&lt;h2 id=&#34;フォーム処理&#34;&gt;フォーム処理&lt;/h2&gt;

&lt;p&gt;コントローラーでフォームの値を受け取って処理するようにしていきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;New&lt;/code&gt; アクションのフォームから値を受け取り、アドレス帳に新規追加する &lt;code&gt;Create&lt;/code&gt; アクションを &lt;code&gt;HomeController&lt;/code&gt; のメソッドとして実装してみます。&lt;/p&gt;

&lt;p&gt;フォームの内容はメソッドの引数として受け取ります。
引数に &lt;code&gt;Bind&lt;/code&gt; アトリビュートを追加してどの値を受け取るのか指定します。
例えば、 &lt;code&gt;New&lt;/code&gt; アクションから受け取るフォームの内容は以下のようにして &lt;code&gt;Person&lt;/code&gt; クラスのインスタンスに割り当てます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [HttpPost]
        public IActionResult Create([Bind(&amp;quot;FirstName,LastName,Email&amp;quot;)]Models.Person person)
        {
            ...
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;POST&lt;/code&gt; メソッド以外でフォームの値を受け取らないように &lt;code&gt;HttpPost&lt;/code&gt; アトリビュートをメソッド自体に設定しています。
引数の &lt;code&gt;person&lt;/code&gt; は &lt;code&gt;Person&lt;/code&gt; クラスのインスタンスです。
&lt;code&gt;Bind&lt;/code&gt; アトリビュートを使って &lt;code&gt;FirstName&lt;/code&gt;, &lt;code&gt;LastName&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt; の値を &lt;code&gt;person&lt;/code&gt; の各プロパティに割り当てています。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;Person&lt;/code&gt; クラスのプロパティにはそれぞれ &lt;code&gt;Required&lt;/code&gt; アトリビュートや &lt;code&gt;EmailAddress&lt;/code&gt; アトリビュートを追加しています。
これらのプロパティにしたがって、フォームの入力値が正しい形式になっているのか確認するには &lt;code&gt;ModelState&lt;/code&gt; の &lt;code&gt;IsValid&lt;/code&gt; プロパティを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [HttpPost]
        public IActionResult Create([Bind(&amp;quot;FirstName,LastName,Email&amp;quot;)]Models.Person person)
        {
            if (!ModelState.IsValid) {
                return View(&amp;quot;New&amp;quot;, person);
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IsValid&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; となる場合は、再びフォームを表示するため &lt;code&gt;New&lt;/code&gt; ビューを呼び出して処理を中断するようにします。&lt;/p&gt;

&lt;h2 id=&#34;モデルを永続化する処理&#34;&gt;モデルを永続化する処理&lt;/h2&gt;

&lt;p&gt;受け取った &lt;code&gt;person&lt;/code&gt; オブジェクトをデータベースに保存するには &lt;code&gt;DbContext&lt;/code&gt; の &lt;code&gt;Add&lt;/code&gt; メソッドで追加した後に &lt;code&gt;SaveChanges&lt;/code&gt; メソッドでデータベースに反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [HttpPost]
        public IActionResult Create([Bind(&amp;quot;FirstName,LastName,Email&amp;quot;)]Models.Person person)
        {
            if (!ModelState.IsValid) {
                return View(&amp;quot;New&amp;quot;, person);
            }
            DbContext.Add(person);
            DbContext.SaveChanges();
            return RedirectToAction(&amp;quot;Index&amp;quot;);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IsValid&lt;/code&gt; の確認後に &lt;code&gt;DbContext.Add&lt;/code&gt; と &lt;code&gt;DbContext.SaveChanges&lt;/code&gt; を呼び出します。
保存処理が終わったら、 &lt;code&gt;RedirectToAction&lt;/code&gt; メソッドで &lt;code&gt;Index&lt;/code&gt; アクションにリダイレクトして一覧を表示させます。&lt;/p&gt;

&lt;h2 id=&#34;残りのcrudアクションを実装する&#34;&gt;残りのCRUDアクションを実装する&lt;/h2&gt;

&lt;p&gt;新規追加のアクションができあがったので残りのアクションも &lt;code&gt;EntityFramework Core&lt;/code&gt; を使った処理で実装していきます。&lt;/p&gt;

&lt;p&gt;一覧表示をする &lt;code&gt;Index&lt;/code&gt; は &lt;code&gt;DbContext&lt;/code&gt; の &lt;code&gt;People&lt;/code&gt; プロパティを使って、保存されている &lt;code&gt;Person&lt;/code&gt; オブジェクトの配列を取得するように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;

...

        [HttpGet]
        public IActionResult Index()
        {
            var people = DbContext.People.ToArray();
            return View(people);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Person&lt;/code&gt; は &lt;code&gt;IEnumerable&lt;/code&gt; を実装しているため、 &lt;code&gt;System.Linq&lt;/code&gt; 名前空間を追加しておくと &lt;code&gt;ToArray&lt;/code&gt; メソッドで配列を取得できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Update&lt;/code&gt; アクションは &lt;code&gt;Create&lt;/code&gt; と同様に &lt;code&gt;Person&lt;/code&gt; クラスのオブジェクトでフォームの値を受け取るようにします。
&lt;code&gt;Create&lt;/code&gt; アクションとは異なり、 URLパターンの中に更新対象を示す &lt;code&gt;id&lt;/code&gt;　パラメータがあります。
この値も &lt;code&gt;person&lt;/code&gt; のプロパティとして受け取るために &lt;code&gt;Bind&lt;/code&gt; アトリビュートで &lt;code&gt;Id&lt;/code&gt; を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
        [HttpPost]
        public IActionResult Update(int id, [Bind(&amp;quot;Id,FirstName,LastName,Email&amp;quot;)]Models.Person data)
        {
            if (!ModelState.IsValid)
            {
                return View(&amp;quot;Edit&amp;quot;, data);
            }
            var person = DbContext.People.FirstOrDefault(p =&amp;gt; p.Id == id);
            if (person == null)
            {
                return NotFound();
            }
            person.FirstName = data.FirstName;
            person.LastName = data.LastName;
            person.Email = data.Email;
            DbContext.SaveChanges();
            return RedirectToAction(&amp;quot;Index&amp;quot;);            
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Update&lt;/code&gt; 内では更新対象を &lt;code&gt;FirstOrDefault&lt;/code&gt; メソッドで取得します。
存在しない場合は &lt;code&gt;NotFound&lt;/code&gt; メソッドでステータスコードが &lt;code&gt;404&lt;/code&gt; のレスポンスを返して処理を終了します。&lt;/p&gt;

&lt;p&gt;取得したオブジェクトのプロパティに、フォームの値を代入したら、 &lt;code&gt;DbContext&lt;/code&gt; の &lt;code&gt;SaveChanges&lt;/code&gt; メソッドでデータベースに反映します。
&lt;code&gt;DbContext&lt;/code&gt; から取得したオブジェクトは &lt;code&gt;DbContext&lt;/code&gt; が状態を追跡しているため、 &lt;code&gt;Add&lt;/code&gt; メソッドを呼び出す必要はありません。&lt;/p&gt;

&lt;p&gt;処理が完了したら &lt;code&gt;Create&lt;/code&gt; アクションと同様に &lt;code&gt;Index&lt;/code&gt; アクションにリダイレクトして一覧を表示します。&lt;/p&gt;

&lt;p&gt;最後に &lt;code&gt;Delete&lt;/code&gt; アクションです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [HttpPost]
        public IActionResult Delete(int id)
        {
            var person = DbContext.People.FirstOrDefault(p =&amp;gt; p.Id == id);
            if (person == null)
            {
                return NotFound();
            }
            DbContext.Remove(person);
            DbContext.SaveChanges();
            return RedirectToAction(&amp;quot;Index&amp;quot;);                        
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;モデルをデータベースから削除するには &lt;code&gt;DbContext&lt;/code&gt; の &lt;code&gt;Remove&lt;/code&gt; メソッドを利用します。
まずは &lt;code&gt;id&lt;/code&gt; で対象のモデルを取得します。
取得したモデルを引数に &lt;code&gt;Remove&lt;/code&gt; メソッドを呼び出します。
&lt;code&gt;SaveChanges&lt;/code&gt; メソッドを呼ぶと、実際にデータベースから削除されます。
処理が完了したら &lt;code&gt;Create&lt;/code&gt; アクションと同様に &lt;code&gt;Index&lt;/code&gt; アクションにリダイレクトして一覧を表示します。&lt;/p&gt;

&lt;p&gt;これで、 &lt;code&gt;HomeController&lt;/code&gt; に Create, Retivie, Update Delete の CRUDに対応したアクションがすべてそろいました。&lt;/p&gt;

&lt;h2 id=&#34;viewをまとめる&#34;&gt;Viewをまとめる&lt;/h2&gt;

&lt;p&gt;これまで &lt;code&gt;View&lt;/code&gt; には動作に必要な最低限の内容だけを書いてあります。
また、TagHelperの利用など、アプリケーション内で共通な設定がそれぞれのViewに記述されています。&lt;/p&gt;

&lt;p&gt;すべてのViewで共通するレイアウトを作成してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;nav class=&amp;quot;navbar navbar-default&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;container-fluid&amp;quot;&amp;gt;
                &amp;lt;div class=&amp;quot;navbar-header&amp;quot;&amp;gt;
                    &amp;lt;a href=&amp;quot;/&amp;quot; class=&amp;quot;navbar-brand&amp;quot;&amp;gt;Addressbook&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/nav&amp;gt;
        &amp;lt;div class=&amp;quot;container-fluid&amp;quot;&amp;gt;
            @RenderBody()
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;twitter-bootstrap&lt;/code&gt; のスタイルを適用するレイアウトです。&lt;/p&gt;

&lt;p&gt;レイアウトの中では &lt;code&gt;RenderBody()&lt;/code&gt; メソッドを呼び出して、実際のViewの内容を表示します。&lt;/p&gt;

&lt;p&gt;レイアウトは &lt;code&gt;_Layout.cshtml&lt;/code&gt; ファイルに作成します。
コントローラーやアクション専用のViewは &lt;code&gt;Views/[コントローラー]/[アクション].cshtml&lt;/code&gt; に配置されています。
&lt;code&gt;_Layout.cshtml&lt;/code&gt; は &lt;code&gt;Views/Shared&lt;/code&gt; 以下の汎用のディレクトリに配置します。&lt;/p&gt;

&lt;p&gt;実際にレイアウトを適用するには、 それぞれの &lt;code&gt;View&lt;/code&gt; の中で &lt;code&gt;Layout&lt;/code&gt; 変数に利用するレイアウトのビュー名を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@{
    Layout = &amp;quot;_Layout&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この処理をすべてのViewの中で書かずとも &lt;code&gt;_ViewStart.cshtml&lt;/code&gt; に書いておくと、自動ですべてのViewで実行されるようになります。
上記のレイアウト指定の内容で &lt;code&gt;Views/_ViewStart.cshtml&lt;/code&gt; を作成しましょう。&lt;/p&gt;

&lt;p&gt;また、タグヘルパーなど複数の &lt;code&gt;View&lt;/code&gt; で利用するライブラリがあります。
これらの &lt;code&gt;import&lt;/code&gt; は &lt;code&gt;_ViewStart.cshtml&lt;/code&gt; に書いても効果はありません。
&lt;code&gt;_ViewImports.cshtml&lt;/code&gt; に共通に利用するライブラリなどの設定をまとめましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_ViewImports.chtml&lt;/code&gt; を作成したら、それぞれの &lt;code&gt;View&lt;/code&gt; に書いていた &lt;code&gt;addTagHelper&lt;/code&gt; の設定を削除しておきましょう。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ASP.NET Core MVC には ViewとControllerの仕組みが用意されている&lt;/li&gt;
&lt;li&gt;Model 部分には EntityFramework Core を利用する&lt;/li&gt;
&lt;li&gt;フォームの内容は &lt;code&gt;FromForm&lt;/code&gt; アトリビュートで指定したモデルオブジェクトのプロパティで受け取れる&lt;/li&gt;
&lt;li&gt;フォームバリデーションは &lt;code&gt;ModelState&lt;/code&gt; の &lt;code&gt;IsValid&lt;/code&gt; と &lt;code&gt;TagHelpers&lt;/code&gt; を組み合わせて利用する&lt;/li&gt;
&lt;li&gt;モデルに &lt;code&gt;System.ComponentModel.DataAnnotations&lt;/code&gt; などで制約などを設定できる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>dotnet on linux</title>
      <link>https://aodag.github.io/post/dotnet-on-linux/</link>
      <pubDate>Tue, 05 Jul 2016 00:09:14 +0900</pubDate>
      
      <guid>https://aodag.github.io/post/dotnet-on-linux/</guid>
      <description>

&lt;h1 id=&#34;linuxで-net-core&#34;&gt;Linuxで .NET Core&lt;/h1&gt;

&lt;p&gt;.NET Core が 1.0.0 リリースされたのでLinuxで使ってみます。
とりあえずツールのインストールと ASP.NET Core を動かすまで。&lt;/p&gt;

&lt;h2 id=&#34;インストールするもの&#34;&gt;インストールするもの&lt;/h2&gt;

&lt;p&gt;とりあえずの開発をするのに必要そうなツールも一緒にインストールします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET Core SDK&lt;/li&gt;
&lt;li&gt;Visual Studio Code

&lt;ul&gt;
&lt;li&gt;omnisharp&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;yo

&lt;ul&gt;
&lt;li&gt;aspnet-generator&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;最初に、 .NET Core を動かすために必要なライブラリをインストールしておきます。
&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/blob/master/1.0.0/debian/core-deps/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; を参考に依存ライブラリをインストールしておきましょう。&lt;/p&gt;

&lt;p&gt;.NET Core は Ubuntuも正式サポートされているので、 &lt;a href=&#34;https://www.microsoft.com/net/core#ubuntu&#34;&gt;.NET Core のダウンロードページ&lt;/a&gt;からインストールできます。
リポジトリを追加してインストールするというppaな感じです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet-dev-1.0.0-preview-2-***&lt;/code&gt; とパッケージが複数存在しているので重複してインストールしてしまうとおかしな挙動になります。
&lt;a href=&#34;https://github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/uninstall/dotnet-uninstall-debian-packages.sh&#34;&gt;このあたりのスクリプト&lt;/a&gt;を使って、きっちり他のバージョンをアンインストールするようにしましょう。&lt;/p&gt;

&lt;p&gt;Visual Studio Code も debパッケージが用意されています。
&lt;a href=&#34;https://code.visualstudio.com/Updates&#34;&gt;リリースページ&lt;/a&gt;から最新のdebをダウンロードしてインストールしましょう。
また、Omnisharpを使ったC#用の拡張が用意されているので、 VS Code 内で &lt;code&gt;Extensions: Install Extension&lt;/code&gt; を実行してインストールします。&lt;/p&gt;

&lt;p&gt;.NET Core の SDK のプロジェクトテンプレートは貧弱なので、 &lt;code&gt;yo&lt;/code&gt; の &lt;code&gt;aspnet-generator&lt;/code&gt; を用意しておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo npm install yo aspnet-generator -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/OmniSharp/generator-aspnet&#34;&gt;aspnet-generator&lt;/a&gt; には ASP.NET Core の開発に役立つテンプレートが数多く用意されています。&lt;/p&gt;

&lt;h2 id=&#34;動作確認&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;.NET Core SDK では &lt;code&gt;dotnet&lt;/code&gt; コマンドでビルドや実行、パッケージングなどを行います。&lt;/p&gt;

&lt;p&gt;とりあえず動作確認のためのディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir hwapp
$ cd hwapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dotnet new&lt;/code&gt; で非常に簡単なプロジェクトを作成します。
&lt;code&gt;dotnet restore&lt;/code&gt; で、依存ライブラリを初期化して、 &lt;code&gt;dotnet run&lt;/code&gt; コマンドで実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet new
$ dotnet restore
$ dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dotnet run&lt;/code&gt; コマンドは実行時にコンパイルが必要であれば事前にコンパイルしてからプログラムを実行します。&lt;/p&gt;

&lt;p&gt;アセンブリを作成してから実行する場合は、 &lt;code&gt;dotnet build&lt;/code&gt; コマンドを使ってアセンブリを作成し、 &lt;code&gt;dotnet&lt;/code&gt; コマンドに直接アセンブリファイルを指定して実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet build
$ dotnet run bin/Debug/hwapp.dll
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.exe&lt;/code&gt; ファイルは作らない方針なんでしょうかね？&lt;/p&gt;

&lt;h2 id=&#34;asp-net-core-を動かす&#34;&gt;ASP.NET Core を動かす&lt;/h2&gt;

&lt;p&gt;コマンドラインの動作を確認したら、 ASP.NET Core を動かしてみます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aspnet-generator&lt;/code&gt; を使って、プロジェクトを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yo aspnet
? What type of application do you want to create? Empty Web Application
? What&#39;s the name of your ASP.NET application? Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dotnet new&lt;/code&gt; はカレントディレクトリにファイルを展開しますが、 &lt;code&gt;yo&lt;/code&gt; ではプロジェクトディレクトリが作られます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd Hello
$ dotnet restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dotnet restore&lt;/code&gt; で必要なライブラリをインストールします。&lt;/p&gt;

&lt;p&gt;このまま &lt;code&gt;dotnet run&lt;/code&gt; で webアプリケーションを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで &lt;code&gt;http://localhost:5000&lt;/code&gt; にアクセスすれば &lt;code&gt;Hello, world&lt;/code&gt; が表示されます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;結構すんなり動く&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://aodag.github.io/about/</link>
      <pubDate>Wed, 30 Dec 2015 21:34:41 +0900</pubDate>
      
      <guid>https://aodag.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ブログ引っ越しました</title>
      <link>https://aodag.github.io/post/first/</link>
      <pubDate>Wed, 30 Dec 2015 21:34:41 +0900</pubDate>
      
      <guid>https://aodag.github.io/post/first/</guid>
      <description>

&lt;h2 id=&#34;これまでのブログ&#34;&gt;これまでのブログ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/aodag&#34;&gt;はてな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.aodag.jp&#34;&gt;Blogger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aodag.posthaven.com&#34;&gt;PostHaven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pelican.aodag.jp&#34;&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aodag&#34;&gt;qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
